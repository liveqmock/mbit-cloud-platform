<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Cloud Foundry 
    Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.

    This product is licensed to you under the Apache License, Version 2.0 (the "License").
    You may not use this product except in compliance with the License.

    This product includes a number of subcomponents with
    separate copyright notices and license terms. Your use of these
    subcomponents is subject to the terms and conditions of the
    subcomponent's license, as noted in the LICENSE file.

-->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
              http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
              http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">

    <context:annotation-config />

    <security:http pattern="/saml/web/**" security="none" />
    <security:http pattern="/resources/**" security="none" />
    <security:http pattern="/vendor/**" security="none" />
    <security:http pattern="/healthz/**" security="none" />
    <security:http request-matcher-ref="oauthTokenAuthcodeFlow" security="none" />
    <security:http request-matcher-ref="oauthTokenRefresh" security="none" />
    <security:http pattern="/login" security="none" />
    <security:http pattern="/info" security="none" />
    <security:http pattern="/error" security="none" />
    <security:http pattern="/forgot_password*" security="none" />
    <security:http pattern="/reset_password" security="none" />
    <security:http pattern="/email_sent" security="none" />
    <security:http pattern="/accounts/new" security="none" />
    <security:http pattern="/accounts/email_sent" security="none" />

    <bean id="config" class="org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBean" />

    <bean id="xFrameOptionsFilter" class="org.cloudfoundry.identity.uaa.login.XFrameOptionsFilter" />

    <bean id="uaaUrl" class="java.lang.String">
        <constructor-arg value="${uaa.url:http://localhost:8080/uaa}"/>
    </bean>

    <!-- TODO: Move the autologin related beans from the login server and saml login server to login common -->
    <bean id="abstractRemoteUaaController" abstract="true">
        <constructor-arg ref="environment" />
        <constructor-arg>
            <bean class="org.springframework.web.client.RestTemplate" />
        </constructor-arg>
        <property name="remoteAuthenticationManager" ref="remoteAuthenticationManager" />
        <property name="uaaBaseUrl" ref="uaaUrl" />
        <property name="authorizationTemplate" ref="authorizationTemplate" />
        <property name="links" ref="links" />
        <property name="codeExpirationMillis" value="300000" />
    </bean>

    <!-- Pattern:/autologin -->
    <http pattern="/autologin" create-session="stateless" entry-point-ref="basicAuthenticationEntryPoint"
        xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
    </http>

    <!-- Pattern: /oauth/authorize parameters:{response_type=code,code=?} -->
    <http request-matcher-ref="autologinAuthorizeRequestMatcher" entry-point-ref="loginEntryPoint"
        xmlns="http://www.springframework.org/schema/security">
        <!-- TODO: add entry point that can redirect back to client app? -->
        <anonymous enabled="false" />
        <custom-filter ref="autologinAuthenticationFilter" position="FORM_LOGIN_FILTER" />
    </http>

    <!-- Version of the /authorize endpoint for stateless clients such as cf -->
    <!-- Pattern: /oauth/authorize parameters:{response_type=token,credentials={} -->
    <http name="statelessAuthzEndpointSecurity" request-matcher-ref="oauthAuthorizeRequestMatcher" create-session="stateless"
        entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="remoteAuthenticationManager"
        xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="passcodeAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER" />
    </http>

    <security:http pattern="/log*.do" authentication-manager-ref="remoteAuthenticationManager"
        disable-url-rewriting="true" entry-point-ref="loginEntryPoint">
        <security:intercept-url pattern="/login.do" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:intercept-url pattern="/logout.do" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:anonymous enabled="true" />
        <security:form-login login-page="/login" username-parameter="username" password-parameter="password"
            login-processing-url="/login.do" authentication-failure-url="/login?error=true" />
        <security:logout logout-url="/logout.do" success-handler-ref="logoutHandler" />
    </security:http>

    <security:http pattern="/reset_password.do" disable-url-rewriting="true"
                   entry-point-ref="loginEntryPoint">
        <security:intercept-url pattern="/reset_password.do" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:anonymous enabled="true" />
    </security:http>

    <security:http pattern="/accounts" disable-url-rewriting="true"
                   entry-point-ref="loginEntryPoint">
        <security:intercept-url pattern="/accounts" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:anonymous enabled="true" />
    </security:http>

    <!-- Owner password flow for external authentication (SAML) -->
    <!-- Pattern: /oauth/token parameters:{grant_type=password,passcode= -->
    <http name="tokenEndpointSecurityForPasscodes" request-matcher-ref="passcodeTokenMatcher" create-session="stateless"
        entry-point-ref="basicAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <custom-filter ref="passcodeAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <bean id="passcodeTokenMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/token" />
        <property name="accept">
            <list>
                <value>application/json</value>
                <value>application/x-www-form-urlencoded</value>
            </list>
        </property>
        <property name="parameters">
            <map>
                <entry key="grant_type" value="password" />
                <entry key="passcode" value="" />
            </map>
        </property>
    </bean>

    <!-- Owner password flow for UAA authentication -->
    <!-- Pattern: /oauth/token parameters:{grant_type=password,password= -->
    <http name="tokenEndpointSecurityForPasswords" request-matcher-ref="uaaPasswordTokenMatcher" create-session="stateless"
        entry-point-ref="basicAuthenticationEntryPoint" authentication-manager-ref="remoteAuthenticationManager"
        xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <bean id="uaaPasswordTokenMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/token" />
        <!--<property name="accept"> -->
        <!--<list> -->
        <!--<value>application/json</value> -->
        <!--<value>application/x-www-form-urlencoded</value> -->
        <!--</list> -->
        <!--</property> -->
        <property name="parameters">
            <map>
                <entry key="grant_type" value="password" />
                <entry key="password" value="" />
            </map>
        </property>
    </bean>

    <bean id="oauthTokenAuthcodeFlow" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/token" />
        <!--<property name="accept"> -->
        <!--<list> -->
        <!--<value>application/json</value> -->
        <!--<value>application/x-www-form-urlencoded</value> -->
        <!--</list> -->
        <!--</property> -->
        <property name="parameters">
            <map>
                <entry key="grant_type" value="authorization_code" />
            </map>
        </property>
    </bean>

    <bean id="oauthTokenRefresh" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/token" />
        <!--<property name="accept"> -->
        <!--<list> -->
        <!--<value>application/json</value> -->
        <!--<value>application/x-www-form-urlencoded</value> -->
        <!--</list> -->
        <!--</property> -->
        <property name="parameters">
            <map>
                <entry key="grant_type" value="refresh_token" />
            </map>
        </property>
    </bean>

    <security:http>
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <security:custom-filter before="FIRST" ref="metadataGeneratorFilter" />
        <security:custom-filter after="FIRST" ref="httpsHeaderFilter" />
        <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter" />
        <security:custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER" />
        <security:logout logout-url="/logout" success-handler-ref="logoutHandler" />
        <security:openid-login login-page="/login" user-service-ref="openIdUserDetailsService"
            authentication-failure-url="/login?error=true">
            <security:attribute-exchange identifier-match=".*myopenid.com.*">
                <security:openid-attribute name="email" type="http://schema.openid.net/contact/email"
                    required="true" />
                <security:openid-attribute name="fullname" type="http://schema.openid.net/namePerson"
                    required="true" />
            </security:attribute-exchange>
            <security:attribute-exchange identifier-match=".*">
                <security:openid-attribute name="email" type="http://axschema.org/contact/email"
                    required="true" count="1" />
                <security:openid-attribute name="firstname" type="http://axschema.org/namePerson/first"
                    required="true" />
                <security:openid-attribute name="lastname" type="http://axschema.org/namePerson/last"
                    required="true" />
                <security:openid-attribute name="fullname" type="http://axschema.org/namePerson"
                    required="true" />
            </security:attribute-exchange>
        </security:openid-login>
        <security:anonymous enabled="false" />
    </security:http>

    <bean id="passcodeAuthenticationFilter" class="org.cloudfoundry.identity.uaa.login.PasscodeAuthenticationFilter">
        <constructor-arg name="authenticationManager" ref="remoteAuthenticationManager" />
        <property name="authorizationTemplate" ref="authorizationTemplate" />
        <property name="uaaBaseUrl" ref="uaaUrl" />
        <property name="parameterNames">
            <list>
                <value>username</value>
                <value>password</value>
                <value>passcode</value>
                <value>credentials</value>
                <value>origin</value>
                <value>user_id</value>
            </list>
        </property>
    </bean>

    <bean id="httpsHeaderFilter" class="org.cloudfoundry.identity.web.HttpsHeaderFilter" />

    <!-- this bean will be overwritten in the saml profile -->
    <bean id="metadataGeneratorFilter" class="org.cloudfoundry.identity.web.NoOpFilter" />
    <!-- this bean will be overwritten in the saml profile -->
    <bean id="samlFilter" class="org.cloudfoundry.identity.web.NoOpFilter" />


    <import resource="classpath:/login-common.xml" />

    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.cloudfoundry.identity.uaa.login.AutologinRequestConverter" />
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="autologinAuthenticationFilter" class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter">
        <constructor-arg ref="autologinAuthenticationManager" />
        <property name="parameterNames">
            <list>
                <value>code</value>
                <value>response_type</value>
            </list>
        </property>
        <property name="methods">
            <set>
                <value>GET</value>
                <value>POST</value>
            </set>
        </property>
    </bean>

    <bean id="autologinAuthenticationManager" class="org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManager">
        <property name="uaaBaseUrl" ref="uaaUrl" />
        <property name="authorizationTemplate" ref="authorizationTemplate" />
    </bean>

    <!-- Pattern: /oauth/authorize parameters:{response_type=code,code=?} -->
    <bean id="autologinAuthorizeRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/authorize" />
        <property name="parameters">
            <map>
                <entry key="response_type" value="code" />
                <entry key="code" value="" />
            </map>
        </property>
    </bean>

    <!-- Handler deciding where to redirect user after successful login -->
    <bean id="successRedirectHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler" />



    <bean id="openIdUserDetailsService" class="org.cloudfoundry.identity.uaa.openid2.OpenIdUserDetailsService" />

    <context:annotation-config />
    <bean id="loginServerConfig" class="org.cloudfoundry.identity.uaa.login.LoginServerConfig" />

    <mvc:resources mapping="/resources/**" location="/resources/" />
    <mvc:annotation-driven />
    <mvc:default-servlet-handler />

    <bean id="springResourceResourceResolver"
          class="org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver"/>

  <!--   <bean id="webTemplateResolver" class="org.thymeleaf.templateresolver.TemplateResolver">
        <property name="resourceResolver" ref="springResourceResourceResolver"/>
        <property name="prefix" value="classpath:/templates/web/" />
        <property name="suffix" value=".html"/>
        <property name="templateMode" value="HTML5"/>
    </bean>
 -->
    <bean id="mailTemplateResolver" class="org.thymeleaf.templateresolver.TemplateResolver">
        <property name="resourceResolver" ref="springResourceResourceResolver"/>
        <property name="prefix" value="classpath:/templates/mail/" />
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML5" />
    </bean>

    <!-- <bean id="webTemplateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolver" ref="webTemplateResolver" />
        <property name="additionalDialects">
            <set>
                <bean class="nz.net.ultraq.thymeleaf.LayoutDialect" />
                <bean class="org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect"/>
            </set>
        </property>
    </bean>
 -->
    <bean id="mailTemplateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolver" ref="mailTemplateResolver" />
    </bean>

    <!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json" />
            </map>
        </property>
        <property name="viewResolvers">
            <list>
                <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
                    <property name="templateEngine" ref="webTemplateEngine" />
                </bean>
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
            </list>
        </property>
        <property name="defaultViews">
            <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
                <property name="extractValueFromSingleKeyModel" value="true" />
            </bean>
        </property>
    </bean>
 -->
    <bean id="buildInfo" class="org.cloudfoundry.identity.uaa.login.BuildInfo" />

    <bean id="tileInfo" class="org.cloudfoundry.identity.uaa.login.TileInfo" />

    <bean id="emailService" class="org.cloudfoundry.identity.uaa.login.EmailService">
        <constructor-arg index="0">
            <bean class="org.springframework.mail.javamail.JavaMailSenderImpl">
                <property name="host" value="${smtp.host:localhost}"/>
                <property name="port" value="${smtp.port:25}"/>
                <property name="username" value="${smtp.user:}"/>
                <property name="password" value="${smtp.password:}"/>
            </bean>
        </constructor-arg>
        <constructor-arg index="1" value="${login.url:http://localhost:8080/login}"/>
        <constructor-arg index="2" value="${login.brand:oss}"/>
    </bean>

    <bean id="accountCreationService" class="org.cloudfoundry.identity.uaa.login.EmailAccountCreationService">
        <constructor-arg>
            <bean class="org.codehaus.jackson.map.ObjectMapper"/>
        </constructor-arg>
        <constructor-arg ref="mailTemplateEngine"/>
        <constructor-arg ref="emailService"/>
        <constructor-arg ref="authorizationTemplate"/>
        <constructor-arg ref="uaaUrl"/>
        <constructor-arg value="${login.brand:oss}"/>
    </bean>

    <bean id="changePasswordService" class="org.cloudfoundry.identity.uaa.login.UaaChangePasswordService">
        <constructor-arg ref="authorizationTemplate"/>
        <constructor-arg ref="uaaUrl"/>
    </bean>

    <bean id="changePasswordController" class="org.cloudfoundry.identity.uaa.login.ChangePasswordController">
        <constructor-arg ref="changePasswordService"/>
    </bean>

    <bean id="resetPasswordService" class="org.cloudfoundry.identity.uaa.login.EmailResetPasswordService">
        <constructor-arg index="0" ref="mailTemplateEngine"/>
        <constructor-arg index="1" ref="emailService"/>
        <constructor-arg index="2" ref="authorizationTemplate"/>
        <constructor-arg index="3" ref="uaaUrl"/>
        <constructor-arg index="4" value="${login.brand:oss}"/>
    </bean>

    <bean id="resetPasswordController" class="org.cloudfoundry.identity.uaa.login.ResetPasswordController">
        <constructor-arg ref="resetPasswordService"/>
    </bean>

    <import resource="saml-providers.xml"/>
</beans>
